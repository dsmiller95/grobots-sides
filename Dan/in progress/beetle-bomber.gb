#side beetle-bombers-2
#author Dan
#seed 1 3 1 1 1 1
#color 656579
;-------------The best defense is a ludacris offense-------------;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SHARED DATA TABLE FORMAT:
;1-100   Danger detection/evasion data grid
;101     Alert index
;102-122 Alert vectors
;130-160 Queen location vectors
;	<time set, xpos, ypos> x10
;
;;;;;;;;;;;
;Channel 1 format: [energy requests]
;position urgency time
;urgency:	0: high energy constructor
;			1: medium energy artillery
;			2: medium energy constructor
;			3: low energy artillery
;			4: low/starving constructor
;			5: starving gatherer
;;;;;;;;;;;
;Channel 2 format: [attack requests]
;velocity position time
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#code

#vector tmp-vect
#var tmp
#const queen-pos-start-index 130
#const queen-pos-end-index 160
#const queen-timeout 100


;; currentid should be the saved id for the queen,
;;	if no id, then it should be negative
set-queen-location: ;;  position currentid -- curentid
	dup 0 < if
		drop
		queen-pos-start-index
		time queen-timeout <= if
			dup 2swap rot
			1 + vwrite
			dup time swap write
			return
		then
		do
			dup read queen-timeout + time <= if ;if the queen read on this vector has timed out
				;;<queenx> <queeny> <current looping id (index)>
				dup 2swap rot
				;;<index> <queenx> <queeny> <index>
				1 + vwrite

				dup time swap write
				return
			then
		3 + dup queen-pos-end-index < while-loop
	then

	;;<queenx> <queeny> <id/index>
	dup 2swap rot
	;;<index> <queenx> <queeny> <index>
	1 + vwrite

	dup time swap write
return

;; gets the queen closest to the given vector
get-closest-queen-id: ;; position -- queenid
	-1 10000
	queen-pos-start-index
	;; position closestID closestDist currentIndex
	do
		dup read queen-timeout + time <= nif ;if the queen read on this vector hasn't timed out
			;; position closestID closestDist currentIndex
			dup 1 + vread
			;; position closestID closestDist currentIndex queenPos
			7 pick 7 pick
			;; position closestID closestDist currentIndex queenPos position
			dist dup 4 pick < if ;;if the distance is closer than the current closest distance
				;; position closestID closestDist currentIndex nextClosestDist
				2swap 2drop over
				;; position currentIndex nextClosestDist currentIndex
			then
		then
		;; position closestID closestDist currentIndex
	3 + dup queen-pos-end-index < while-loop
	
	2drop rrot 2drop
return

get-queen-location: ;; queenid -- queen-position is-active
	dup 1 + vread
	rot read queen-timeout + time <=
return

#const attack-timeout 30
#const attack-channel 2
#var last-sent-attack-request
send-attack-request: ;;request-velocity request-position --
	last-sent-attack-request attack-timeout 0.7 * + time < if
		time 5 attack-channel send
		time last-sent-attack-request!
	else
		4 dropn
	then
return


#var last-attack-fetch
#vector last-fetched-attack
#vector last-fetched-attack-vel

attack-in-range-request: ;; if last target is still valid, attack. Otherwise, search for a new valid target and attack
	last-attack-fetch attack-timeout + time >
	last-fetched-attack position grenades-range in-range and set-target& ifg
	
	0 0 0 0
	message-read: 4 dropn attack-channel receive message-stream-end& nifg
		attack-timeout + time > if
		2dup position grenades-range in-range and-if
		0 0 0 0 then ;keeps valid segments on the stack ;message-valid& ifg
	message-read& jump
	
	
			
	message-stream-end:
		stack dup target-find-end& nifg
			4 / 1 swap random-int 4 * dup 1 + dup 1 + dup 1 +
			pick swap pick 2swap pick swap pick
		
		
		last-fetched-attack! last-fetched-attack-vel!
		
		;attack-channel clear-messages
		time last-attack-fetch!
		
	set-target:
		last-fetched-attack last-fetched-attack-vel time last-attack-fetch - vs* v+ last-fetched-attack-vel lead-grenade
	target-find-end:
		stack dropn
return


#const syphon-timeout 50
#const energy-channel 1
#var last-sent-energy-request

send-energy-request: ;; urgency --
	last-sent-energy-request syphon-timeout 0.7 * + time < if
		position rot time 4 energy-channel send
		time last-sent-energy-request!
	else
		drop
	then
return

#var last-syphon-time
#vector syphon-target
;
;Jumps to found-target | no-target based on whether there is a valid target or not
;	if jumped to found-target, target is on stack
;	if jumped to no-target, stack is empty
syphon-in-range-request: ; found-target& no-target& --
	tmp-vect!
	last-syphon-time syphon-timeout + time >
	syphon-target position syphon-range in-range and valid-syphon-target& ifg
	;;;Create sorting method!
	
	0 0
	syphon-message-read: 2drop energy-channel receive no-valid-syphon-message& nifg
			nip syphon-timeout + time > syphon-message-valid& ifg
	syphon-message-read& jump
	
	syphon-message-valid:
		2dup position syphon-range in-range syphon-message-read& nifg
			syphon-target!
			energy-channel clear-messages
			time last-syphon-time!
			valid-syphon-target& jump
			
	no-valid-syphon-message:
		stack dropn
		tmp-vect swap r> 2drop jump
	valid-syphon-target:
		syphon-target tmp-vect r> 2drop jump
return
	
#const table-width 10
#const table-height 10
#const table-sec-width 10   ;world-width / table-width
#const table-sec-height 10  ;""
#const danger-cooldown-time 1500

;loops through every vector between start-vect and end-vect,
;	jumping to loop& each time, with the current vector on
;	the top of the stack. loop& must return with the vector
;	moved off the stack. Possible to have stacking operators
;	in loop, meaning items can be left on the stack after
;	returning from the looping function and they will remain
;	on the stack in the same order when the end adress is
;	called
;	start- and end-vect must be valid adresses within this file
loop-through: ;loop& end& end-vect start-vect--
	sync
	swap tuck swap
	
	;loop& end& end-x end-y start-x progress-x progress-y
	do dup 5 pick <= while ;y-loop
		nip 2 pick swap
		do over 6 pick <= while ;x-loop
			sync
			2dup
			>r >r 2swap >r >r 2swap >r >r rot dup >r
			return-label& >r
			jump
			return-label:
				r> r> r> r> r> r> 1 + r>
		loop
		1 +
	loop
	5 dropn
	nip jump
return

get-inTable-coord: ;vect -- mem-address
	table-sec-height / floor table-sec-width * swap table-sec-width / floor + 1 +
return

get-rounded-coord:
	table-sec-height / floor
	swap
	table-sec-width  / floor
	swap
return

get-inTable-from-rounded: ;formatted vect -- mem-address
	table-sec-width * + 1 +
return

limit-into-range: ;max-vect-range vector -- vector
	0 max rot min
	swap
	0 max rot min
	swap
return

set-danger: ;danger-vect --
	single-danger-set& set-danger-done& 
	2swap get-rounded-coord
	2dup
	1 1 v+ table-width 1 - table-height 1 - 2swap limit-into-range
	2swap
	-1 -1 v+ table-width 1 - table-height 1 - 2swap limit-into-range
	loop-through& jump
	
	single-danger-set:
		get-inTable-from-rounded time swap write
		return
	set-danger-done:
return

is-danger: ;vect -- flag
	time danger-cooldown-time < if
		2drop 0 return
	then
	get-inTable-coord read danger-cooldown-time + time >
return

is-danger-nearby: ; vect -- flag
	0 check-for-danger& end-check& 5 pick 5 pick
	get-rounded-coord
	2dup
	1 1 v+ table-width 1 - table-height 1 - 2swap limit-into-range
	2swap
	-1 -1 v+ table-width 1 - table-height 1 - 2swap limit-into-range
	;looping-label& end-loop-label& end-vect start-vect --
	loop-through& jump
	
	check-for-danger:
		table-sec-width * + 1 +
		read danger-cooldown-time + time < nif
			dup nif
				drop 1
			then
		then
	return
	end-check:
	rrot 2drop
return ;either 1 or 0
	
get-random-safe: ; -nothing- center-vect -- safe-vector
	add-possible-vect& end-possible-loc-stacking& 2swap
	get-rounded-coord
	2dup
	1 1 v+ table-width 1 - table-height 1 - 2swap limit-into-range
	2swap
	-1 -1 v+ table-width 1 - table-height 1 - 2swap limit-into-range
	;looping-label& end-loop-label& end-vect start-vect --
	loop-through& jump
	
	
	add-possible-vect:
		2dup
		table-sec-width * + 1 +
		read danger-cooldown-time + time < nif
			2drop
		then
	return
	end-possible-loc-stacking:	
	
	stack if	;if there are one or more safe locations
		;drop a random number of pairs off the stack, gaurenteed to leave at least one pair
		stack 2 / 1 - floor 0 swap random-int 2 * dropn
		tmp-vect!
		stack dropn
	else		;if there are no safe locations found
		 position get-rounded-coord tmp-vect!
	then
	tmp-vect table-sec-height * swap table-sec-width * swap
	0 table-sec-width random 0 table-sec-height random v+
return



#const alert-index 100
#const dangerTableLength 20

write-alert: ;alertVector -- 
	alert-index 1 + read dup 2 ifev
	dup 2swap rot alert-index + vwrite
	dangerTableLength mod 2 + alert-index 1 + write
return

most-recent-alert: ; -- index vector || 0 0 on faliure
	alert-index 1 + read dup nif
		drop 2 dup alert-index 1 + write
	then
	2 - dup ;OrignalAddress-2 originalAddress(shifted negative)-2
	startLoop& jump
	do 2dup <> while
		startLoop:
		2 - dangerTableLength mod
		dup 2 alert-index + + vread 2dup or if
			2swap nip 2 alert-index + + rrot
			return
		else
			2drop
		then
	loop
	2drop
0 0 return

random-biased-location: ; returns a vector biased with a 50% chance to be in a corner
	0.5 random-bool if
		0 world-width random 0 world-height random return
	then
	0 3 random-int dup nif
		drop 0 10 random 0 10 random return
	then
	dup 1 = if
		drop 0 10 random world-height dup 10 - random return
	then
	dup 2 = if
		drop world-width dup 10 - random 0 10 random return
	then
	3 = if
		world-width dup 10 - random world-height dup 10 - random return
	then
return


limit-into-world: ;vector -- vector
	0 max world-height min
	swap
	0 max world-width  min
	swap
return


;1
#type aphid
#color 00FF00
#decoration FF0000 dot
#hardware
processor 50
solar-cells .015
constructor 1
energy 500 20
armor 60
repair-rate 0.3
engine 0.04 
eater 1
food-sensor 5
syphon 0.5 20
#code

#var found-new-dest
#var last-alarm-armor
#var request-energy

#var returning-energy

#vector dest

new-dest:
	position
	time danger-cooldown-time < if
		dup 15 - 0 max swap 15 + world-height min random
		swap
		dup 15 - 0 max swap 15 + world-width  min random
		swap
	else
		get-random-safe
	then
	dest!
return
	

#start
new-dest
max-armor last-alarm-armor!


do
	energy 150 > if
		constructor-type nif
			1 1 1
			3 type-population dup if
				1 type-population swap / 4 > if
					3
				then
			else
				drop 3
			then
			2 type-population 101 < if
				2 2
			then
			stack 1 swap random-int
			pick
			constructor-type!
			stack dropn
		then
		constructor-max-rate constructor-rate!
	else
		0 constructor-rate!
	then

	energy 400 > food-found not and if
		
	then
	
	energy 5 < mass 20 > or not-request& nifg
	constructor-type 3 = not-request& nifg 
	;constructor-progress dup constructor-remaining + / 0.5 > not-request& nifg
	request-if:
		1 request-energy!
		end-request-if& jump
	not-request:
		0 request-energy!
	end-request-if:
	
	request-energy if
		1000 max-energy energy - + send-energy-request^
		0 syphon-rate!
	else
		energy 50 > if
			found-syphon& no-syphon& syphon-in-range-request^
			
			found-syphon:
				position v- rect-to-polar syphon-direction! syphon-distance!
				syphon-max-rate negate syphon-rate!
				end-syphon& jump
			no-syphon:
				0 syphon-rate!
			end-syphon:
		else
			0 syphon-rate!
		then
	then
		
	energy 10 < if
		sync sync sync sync sync sync sync sync sync sync
		sync sync sync sync sync sync sync sync sync sync
		sync sync sync sync sync sync sync sync sync sync
		sync sync sync sync sync sync sync sync sync
		80
	else
		40
	then
	periodic-food-sensor drop
	food-found if
		food-position position radius in-range if
			0 engine-power!
			food-energy 50 > if
				found-new-dest nif
					new-dest
					1 found-new-dest!
				else
					sync sync sync sync sync sync sync sync sync sync
				then
			then
		else
			food-position is-danger if
				found-new-dest if
					dest seek-location
					dest position 3 in-range if
						0 found-new-dest!
					then
				else
					new-dest
					dest seek-location
					1 found-new-dest!
				then
			else
				food-position seek-location engine-max-power engine-power!
			then
		then
	else
		request-energy nif
			dest seek-location
			energy 10 < if
				0.005
			else energy 50 < if
				0.1
			celse
				0.2
			then
			engine-power!
			dest position 3 in-range if
				new-dest
			else
				sync sync sync sync sync sync sync sync sync sync
			then
		else
			0 engine-power!
		then
	then
	;If damaged, add position to current danger position table in public memory
	armor last-alarm-armor < if
		armor last-alarm-armor!
		position 2dup write-alert set-danger
	then
	armor max-armor < if energy 100 > and-if
		max-repair-rate repair-rate!
	else
		0 repair-rate!
	then
forever


;2
#type bombadeir beetle
#color 000
#hardware
engine 0.15
armor 100
bomb 500
robot-sensor 10
shot-sensor 5
processor 50
solar-cells 0.1
energy 100 50

#code

#const dangerTableLength 20
#vector dest
#var robot_found
#var current-loc-index
#var last-alarm-armor
#var damaged

new-dest:
	current-loc-index if
		current-loc-index vread dest rot = rrot = and if
			0 0 current-loc-index vwrite
		then
	then
	most-recent-alert 2dup or if
		dest! current-loc-index!
	else
		2drop random-biased-location dest! 0 current-loc-index!
	then
return


#start
0 current-loc-index!
max-armor last-alarm-armor!
0 shot-sensor-sees-friendly!
new-dest
do
	energy 20 > if
	damaged if
		5 periodic-shot-sensor if
			damaged 1 - damaged!
			shot-found shot-type 1 = shot-type 2 = or and if
				shot-position shot-velocity vnegate 200 vs* v+ limit-into-world dest!
				shot-position set-danger
			then
		then
	else
		20 periodic-shot-sensor if
			shot-found shot-type 1 = shot-type 2 = or and if
				30 damaged!
				shot-position shot-velocity vnegate 200 vs* v+ limit-into-world dest!
				shot-position set-danger
			then
		then
	then
	then
	
	robot_found damaged or if
		10 periodic-robot-sensor drop
	else
		50 periodic-robot-sensor drop
	then
	robot-found if
		robot_found nif robot-position write-alert then
		1 robot_found!
		robot-position robot-velocity seek-moving-location
		enemy-collision friendly-collision not and if
			die
		then
	else
		0 robot_found!
		dest seek-location damaged engine-max-power 0.05 ifev engine-power!
		dest position 3 in-range if
			new-dest
		then
	then
	
	;If damaged, add position to current danger position table in public memory
	armor last-alarm-armor < if
		armor last-alarm-armor!
		20 damaged!
		position set-danger
	then
forever

;3
#type queen
#color FF009F
#hardware
armor 500
processor 40
solar-cells 0.1
constructor 3
energy 50 10
robot-sensor 20 20

#code
#var nearby-tarantulas
#var my-id

#start
0 nearby-tarantulas!
4 constructor-type!
1 robot-sensor-sees-friends!

position -1 set-queen-location^ my-id! ;;  position currentid -- curentid

do
	
	position my-id set-queen-location^ my-id!;;  position currentid -- curentid
	energy 5 < if
		3
	else energy 40 < if
		2
	celse
		0
	then		
	send-energy-request^
	
	energy 30 > if
		20
	else
		50
	then
	periodic-robot-sensor if
		robot-sensor-sees-friends if
			0
			do
				side robot-side = if
					5 robot-type = +
				else
					robot-velocity robot-position send-attack-request^
				then
				next-robot
			while-loop
			nearby-tarantulas!
		else
			do
				robot-velocity robot-position send-attack-request^
				next-robot
			while-loop
		then
		robot-sensor-sees-friends not robot-sensor-sees-friends!
	then
	
	constructor-type nif
		energy 30 > if
			0 15 random-int nearby-tarantulas > if position is-danger-nearby and-if
				5
			else
				2
			then
		else
			4
		then
		constructor-type! stack dropn
	then
	energy 10 > if
		constructor-max-rate
	else
		0
	then
	constructor-rate!
forever


do
	energy 5 < if
		3
	else energy 40 < if
		2
	celse
		0
	then
	
	do

	while-loop

forever

;4
#type fungus
#color FFFFFF
#hardware

armor 50
repair-rate 0.04
solar-cells 0.5
syphon 0.9 10
energy 300 0
processor 50
engine 0.03
;grenades 50 25 50

#code

#start
do
	position get-closest-queen-id^ drop ;; position -- queenid
	;grenades-cooldown attack-in-range-request& nifc
	100 energy < no-syphon& nifg
	found-syphon& no-syphon& syphon-in-range-request^
	found-syphon:
		position v- rect-to-polar syphon-direction! dup syphon-distance!
		syphon-range 2 / > if
			syphon-target seek-location
		else
			0 engine-power!
		then
		syphon-max-rate negate syphon-rate!
		end-syphon& jump
	no-syphon:
		0 syphon-rate!
		0 engine-power!
	end-syphon:
	
	armor max-armor < if
		max-repair-rate
	else
		0
	then
	repair-rate!
forever

;5
#type tarantula
#color FFFF00
#decoration FF0000 x
#hardware
engine 0.01
armor 100
energy 500 50
processor 20
grenades 50 25 50

#code

#start
do
	grenades-cooldown attack-in-range-request& nifc
	
	energy 50 < if
		3 send-energy-request^
	else
		energy 450 < if
			1 send-energy-request^
		then
	then
forever




;6
#type fruit fly
#color FFA0B0
#hardware
engine 0.2
armor 10
robot-sensor 15
food-sensor 5
eater 0.5
processor 20
solar-cells 0.04
energy 150 50
grenades 1 100 10

#code
#vector dest
#var eating

new-dest:
	random-biased-location dest!
return
#start
new-dest

do
	energy 40 > 			 end-robot-find& nifg
	50 periodic-robot-sensor end-robot-find& nifg
	robot-found 			 end-robot-find& nifg
		robot-position write-alert
	end-robot-find:
	
	grenades-cooldown not if energy 80 > and-if
		most-recent-alert^ 2dup and if
			position v- rect-to-polar over grenades-range <= if
				fire-grenade
			then
			drop
		else
			2drop
		then
	then
	
	
	40 periodic-food-sensor drop
	food-found  goto-dest& nifg
	energy 80 < eat1& ifg
	energy max-energy < eating and eat2& ifg
	0 eating!
	goto-dest& jump
	
	eat1: 1 eating!
	eat2:
		food-position position radius in-range if
			0 engine-power!
		else
			food-position seek-location engine-max-power engine-power!
		then
	pass-dest& jump
	goto-dest:
		dest seek-location engine-max-power engine-power!
		dest position 3 in-range if
			new-dest
		then
	pass-dest:
	
	energy 10 < if
		0.01 engine-power!
	then
	
forever
#end
